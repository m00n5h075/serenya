// Mocks generated by Mockito for TimelineContainer pagination tests
// Manual implementation since build_runner is not available

import 'package:mockito/mockito.dart' as _i1;
import 'package:serenya_app/core/providers/health_data_provider.dart' as _i2;
import 'package:serenya_app/models/local_database_models.dart' as _i3;

class MockHealthDataProvider extends _i1.Mock implements _i2.HealthDataProvider {
  @override
  List<_i3.SerenyaContent> get content =>
      (super.noSuchMethod(
        Invocation.getter(#content),
        returnValue: <_i3.SerenyaContent>[],
      ) as List<_i3.SerenyaContent>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get isLoadingMore =>
      (super.noSuchMethod(
        Invocation.getter(#isLoadingMore),
        returnValue: false,
      ) as bool);

  @override
  bool get hasMoreData =>
      (super.noSuchMethod(
        Invocation.getter(#hasMoreData),
        returnValue: true,
      ) as bool);

  @override
  String? get error =>
      (super.noSuchMethod(
        Invocation.getter(#error),
        returnValue: null,
      ) as String?);

  @override
  int get currentPage =>
      (super.noSuchMethod(
        Invocation.getter(#currentPage),
        returnValue: 0,
      ) as int);

  @override
  int get pageSize =>
      (super.noSuchMethod(
        Invocation.getter(#pageSize),
        returnValue: 20,
      ) as int);

  @override
  Future<void> loadContent({
    int? limit,
    bool refresh = false,
    bool resetPagination = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadContent,
          [],
          {
            #limit: limit,
            #refresh: refresh,
            #resetPagination: resetPagination,
          },
        ),
        returnValue: Future<void>.value(),
      ) as Future<void>);

  @override
  Future<void> loadContentByType(
    _i3.ContentType contentType, {
    int? limit,
    bool refresh = false,
    bool resetPagination = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadContentByType,
          [contentType],
          {
            #limit: limit,
            #refresh: refresh,
            #resetPagination: resetPagination,
          },
        ),
        returnValue: Future<void>.value(),
      ) as Future<void>);

  @override
  Future<void> loadMoreContent({_i3.ContentType? contentType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadMoreContent,
          [],
          {#contentType: contentType},
        ),
        returnValue: Future<void>.value(),
      ) as Future<void>);

  @override
  void applyPreloadedContent() =>
      (super.noSuchMethod(
        Invocation.method(#applyPreloadedContent, []),
        returnValueForMissingStub: null,
      ));

  @override
  Future<void> addContent(_i3.SerenyaContent content) =>
      (super.noSuchMethod(
        Invocation.method(#addContent, [content]),
        returnValue: Future<void>.value(),
      ) as Future<void>);
}