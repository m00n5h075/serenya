// Mocks generated by Mockito for HealthDataProvider pagination tests
// Manual implementation since build_runner is not available

import 'package:mockito/mockito.dart' as i1;
import 'package:serenya_app/core/database/health_data_repository.dart' as i2;
import 'package:serenya_app/models/local_database_models.dart' as i3;

class MockHealthDataRepository extends i1.Mock implements i2.HealthDataRepository {
  @override
  Future<List<i3.SerenyaContent>> getAllContent({
    int? limit,
    int? offset,
    String? lastContentId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllContent,
          [],
          {
            #limit: limit,
            #offset: offset,
            #lastContentId: lastContentId,
          },
        ),
        returnValue: Future<List<i3.SerenyaContent>>.value([]),
      ) as Future<List<i3.SerenyaContent>>);

  @override
  Future<List<i3.SerenyaContent>> getContentByType(
    i3.ContentType contentType, {
    int? limit,
    int? offset,
    String? lastContentId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContentByType,
          [contentType],
          {
            #limit: limit,
            #offset: offset,
            #lastContentId: lastContentId,
          },
        ),
        returnValue: Future<List<i3.SerenyaContent>>.value([]),
      ) as Future<List<i3.SerenyaContent>>);

  @override
  Future<int> getContentCount({i3.ContentType? contentType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContentCount,
          [],
          {#contentType: contentType},
        ),
        returnValue: Future<int>.value(0),
      ) as Future<int>);

  @override
  Future<bool> hasMoreContent({
    i3.ContentType? contentType,
    String? lastContentId,
    int currentCount = 0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasMoreContent,
          [],
          {
            #contentType: contentType,
            #lastContentId: lastContentId,
            #currentCount: currentCount,
          },
        ),
        returnValue: Future<bool>.value(false),
      ) as Future<bool>);
}